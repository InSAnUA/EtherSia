#include "Arduino.h"

#include "dns.h"

#suite DNS

// Request for AAAA ipv6.aelius.com
const uint8_t requestPayload[] = {
    0x12, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,  // 8
    0x00, 0x00, 0x00, 0x00, 0x04, 0x69, 0x70, 0x76,  // 16
    0x36, 0x06, 0x61, 0x65, 0x6c, 0x69, 0x75, 0x73,  // 24
    0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00,  // 32
    0x01
};

// Response for AAAA ipv6.aelius.com
const uint8_t replyPayload[] = {
    0x12, 0x34, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x03, 0x00, 0x00, 0x04, 0x69, 0x70, 0x76,
    0x36, 0x06, 0x61, 0x65, 0x6c, 0x69, 0x75, 0x73,
    0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00,
    0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00,
    0x00, 0x03, 0x71, 0x00, 0x10, 0x20, 0x01, 0x41,
    0xc8, 0x00, 0x51, 0x07, 0xcf, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x06, 0xc0, 0x11, 0x00,
    0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0x70, 0x00,
    0x15, 0x01, 0x61, 0x02, 0x6e, 0x73, 0x08, 0x62,
    0x79, 0x74, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x02,
    0x63, 0x6f, 0x02, 0x75, 0x6b, 0x00, 0xc0, 0x11,
    0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0x70,
    0x00, 0x04, 0x01, 0x62, 0xc0, 0x4b, 0xc0, 0x11,
    0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0x70,
    0x00, 0x04, 0x01, 0x63, 0xc0, 0x4b,
};

// Long Response for AAAA www.apple.com
// Includes 2x CNAME, 2x AAAA and Authoritative Name servers
const uint8_t longReplyPayload[] = {
    0xbb, 0x91, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00,
    0x09, 0x00, 0x04, 0x03, 0x77, 0x77, 0x77, 0x05, 0x61,
    0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
    0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00,
    0x01, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x1b, 0x03, 0x77,
    0x77, 0x77, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03,
    0x63, 0x6f, 0x6d, 0x07, 0x65, 0x64, 0x67, 0x65, 0x6b,
    0x65, 0x79, 0x03, 0x6e, 0x65, 0x74, 0x00, 0xc0, 0x2b,
    0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x31, 0x5c, 0x00,
    0x2f, 0x03, 0x77, 0x77, 0x77, 0x05, 0x61, 0x70, 0x70,
    0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x07, 0x65, 0x64,
    0x67, 0x65, 0x6b, 0x65, 0x79, 0x03, 0x6e, 0x65, 0x74,
    0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x72, 0x65,
    0x64, 0x69, 0x72, 0x06, 0x61, 0x6b, 0x61, 0x64, 0x6e,
    0x73, 0xc0, 0x41, 0xc0, 0x52, 0x00, 0x05, 0x00, 0x01,
    0x00, 0x00, 0x06, 0x66, 0x00, 0x18, 0x05, 0x65, 0x36,
    0x38, 0x35, 0x38, 0x04, 0x64, 0x73, 0x63, 0x63, 0x0a,
    0x61, 0x6b, 0x61, 0x6d, 0x61, 0x69, 0x65, 0x64, 0x67,
    0x65, 0xc0, 0x41, 0xc0, 0x8d, 0x00, 0x1c, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x09, 0x00, 0x10, 0x2a, 0x02, 0x26,
    0xf0, 0x00, 0x5d, 0x02, 0xa8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1a, 0xca, 0xc0, 0x8d, 0x00, 0x1c, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x10, 0x2a, 0x02,
    0x26, 0xf0, 0x00, 0x5d, 0x02, 0xa5, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1a, 0xca, 0xc0, 0x93, 0x00, 0x02,
    0x00, 0x01, 0x00, 0x00, 0x03, 0xb5, 0x00, 0x09, 0x06,
    0x6e, 0x31, 0x64, 0x73, 0x63, 0x63, 0xc0, 0x98, 0xc0,
    0x93, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0xb5,
    0x00, 0x09, 0x06, 0x6e, 0x30, 0x64, 0x73, 0x63, 0x63,
    0xc0, 0x98, 0xc0, 0x93, 0x00, 0x02, 0x00, 0x01, 0x00,
    0x00, 0x03, 0xb5, 0x00, 0x09, 0x06, 0x6e, 0x32, 0x64,
    0x73, 0x63, 0x63, 0xc0, 0x98, 0xc0, 0x93, 0x00, 0x02,
    0x00, 0x01, 0x00, 0x00, 0x03, 0xb5, 0x00, 0x09, 0x06,
    0x6e, 0x34, 0x64, 0x73, 0x63, 0x63, 0xc0, 0x98, 0xc0,
    0x93, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0xb5,
    0x00, 0x09, 0x06, 0x61, 0x30, 0x64, 0x73, 0x63, 0x63,
    0xc0, 0x98, 0xc0, 0x93, 0x00, 0x02, 0x00, 0x01, 0x00,
    0x00, 0x03, 0xb5, 0x00, 0x09, 0x06, 0x6e, 0x35, 0x64,
    0x73, 0x63, 0x63, 0xc0, 0x98, 0xc0, 0x93, 0x00, 0x02,
    0x00, 0x01, 0x00, 0x00, 0x03, 0xb5, 0x00, 0x09, 0x06,
    0x6e, 0x36, 0x64, 0x73, 0x63, 0x63, 0xc0, 0x98, 0xc0,
    0x93, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0xb5,
    0x00, 0x09, 0x06, 0x61, 0x31, 0x64, 0x73, 0x63, 0x63,
    0xc0, 0x98, 0xc0, 0x93, 0x00, 0x02, 0x00, 0x01, 0x00,
    0x00, 0x03, 0xb5, 0x00, 0x09, 0x06, 0x6e, 0x33, 0x64,
    0x73, 0x63, 0x63, 0xc0, 0x98, 0xc1, 0x3d, 0x00, 0x1c,
    0x00, 0x01, 0x00, 0x00, 0x13, 0x55, 0x00, 0x10, 0x2a,
    0x02, 0x26, 0xf0, 0x00, 0x7d, 0xf0, 0x00, 0x2b, 0x8a,
    0x40, 0x50, 0x94, 0x6a, 0xbb, 0x97, 0xc1, 0x7c, 0x00,
    0x1c, 0x00, 0x01, 0x00, 0x00, 0x13, 0x55, 0x00, 0x10,
    0x26, 0x00, 0x14, 0x80, 0xe8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xfe,
    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x04, 0xb7, 0x00,
    0x04, 0x17, 0x3d, 0xfb, 0xaa, 0xc0, 0xe9, 0x00, 0x01,
    0x00, 0x01, 0x00, 0x00, 0x08, 0x97, 0x00, 0x04, 0x5c,
    0x7b, 0x4e, 0x37
};


#test dnsMakeRequest_ipv6_aelius
uint8_t buffer[256];
uint16_t len = dnsMakeRequest((uint8_t*)buffer, "ipv6.aelius.com", 0x1234);
ck_assert_int_eq(len, sizeof(requestPayload));
ck_assert(memcmp(requestPayload, buffer, sizeof(requestPayload)) == 0);


#test dnsProcessReply_ipv6_aelius
uint8_t expect[16] = {
    0x20, 0x01, 0x41, 0xc8, 0x00, 0x51, 0x07, 0xcf,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
};

IPv6Address *addr = dnsProcessReply(replyPayload, sizeof(replyPayload), 0x1234);
ck_assert_ptr_ne(addr, NULL);
ck_assert(memcmp(expect, addr, sizeof(expect)) == 0);


#test dnsProcessReply_id_mismatch
IPv6Address *addr = dnsProcessReply(replyPayload, sizeof(replyPayload), 0xFFFF);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_error_code
const uint8_t errorPayload[] = {
    0x2a, 0x45, 0x81, 0x83, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x69, 0x6e, 0x76,
    0x61, 0x6c, 0x69, 0x64, 0x07, 0x65, 0x78, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
    0x00, 0x00, 0x1c, 0x00, 0x01
};
IPv6Address *addr = dnsProcessReply(errorPayload, sizeof(errorPayload), 0x2a45);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_truncated_query
IPv6Address *addr = dnsProcessReply(replyPayload, 24, 0x1234);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_no_AAAA
const uint8_t exampleResponse[] = {
    0xe0, 0x10, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
    0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
    0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00,
    0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0xc5, 0x83, 0x00, 0x04, 0x5d, 0xb8, 0xd8,
    0x22
};
IPv6Address *addr = dnsProcessReply(exampleResponse, sizeof(exampleResponse), 0xe010);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_with_cnames
IPv6Address expect("2a02:26f0:5d:2a8::1aca");
IPv6Address *addr = dnsProcessReply(longReplyPayload, sizeof(longReplyPayload), 0xbb91);
ck_assert_ptr_ne(addr, NULL);
ck_assert(memcmp(expect, addr, sizeof(expect)) == 0);


#test dnsProcessReply_truncated_response
IPv6Address *addr = dnsProcessReply(longReplyPayload, 128, 0xbb91);
ck_assert_ptr_eq(addr, NULL);

