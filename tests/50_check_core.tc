#include "EtherSia.h"
#include "util.h"
#suite core

const char local_mac[] = "ca:2f:6d:70:f9:5f";

const uint8_t expect_linklocal_nd[] = {
    0x33, 0x33, 0xff, 0x70, 0xf9, 0x5f,     // Ethernet Destination
    0xca, 0x2f, 0x6d, 0x70, 0xf9, 0x5f,     // Ethernet Source
    0x86, 0xdd,                             // EtherType
    0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3a, 0xff,                                                 // IPv6 header
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Source Address
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x70, 0xf9, 0x5f, // Destination Address
    0x87, 0x00, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00,                                                 // ICMPv6 header
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x2f, 0x6d, 0xff, 0xfe, 0x70, 0xf9, 0x5f  // ICMPv6 Target Address
};

const uint8_t expect_router_solication[] = {
    0x33, 0x33, 0x00, 0x00, 0x00, 0x02,     // Ethernet Destination
    0xca, 0x2f, 0x6d, 0x70, 0xf9, 0x5f,     // Ethernet Source
    0x86, 0xdd,                             // EtherType
    0x60, 0x00, 0x00, 0x00, 0x00, 0x10, 0x3a, 0xff,                                                 // IPv6 header
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x2f, 0x6d, 0xff, 0xfe, 0x70, 0xf9, 0x5f, // Source Address
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // Destination Address
    0x85, 0x00, 0x1d, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,                                     // ICMPv6 header
    0xca, 0x2f, 0x6d, 0x70, 0xf9, 0x5f                                                              // ICMPv6 Source Address
};

const uint8_t router_advertisment[] = {
    0x33, 0x33, 0x00, 0x00, 0x00, 0x01,     // Ethernet Destination
    0x3c, 0x61, 0x04, 0xd4, 0x8d, 0x88,     // Ethernet Source
    0x86, 0xdd,                             // EtherType
    0x60, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3a, 0xff,
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x61, 0x04, 0xff, 0xfe, 0xd4, 0x8d, 0x88,
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x86, 0x00, 0x65, 0x08, 0x40, 0x00, 0x03, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x3c, 0x61, 0x04, 0xd4, 0x8d, 0x88,
    0x03, 0x04, 0x40, 0xc0, 0x00, 0x27, 0x8d, 0x00, 0x00, 0x09, 0x3a, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x01, 0x08, 0xb0, 0xff, 0xd5, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


#test default_dns_server
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);
IPv6Address google("2001:4860:4860::8888");
ck_assert(ether.dnsServerAddress() == google);


#test sets_linklocal_address
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);
IPv6Address addr("fe80:0000:0000:0000:c82f:6dff:fe70:f95f");
ck_assert(ether.linkLocalAddress() == addr);


#test sends_linklocal_nd
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);

ck_assert_int_eq(1, ether.getSentCount());
frame_t &frame = ether.getLastSent();
ck_assert_int_eq(frame.length, sizeof(expect_linklocal_nd));
ck_assert(memcmp(frame.packet, expect_linklocal_nd, sizeof(expect_linklocal_nd)) == 0);
ether.end();


#test handles_router_solicitation
EtherSia_Dummy ether;
ether.injectRecievedPacket((void*)router_advertisment, sizeof(router_advertisment));
ether.begin(local_mac);

ck_assert_int_eq(2, ether.getSentCount());
frame_t &frame = ether.getLastSent();
ck_assert_int_eq(frame.length, sizeof(expect_router_solication));
ck_assert(memcmp(frame.packet, expect_router_solication, sizeof(expect_router_solication)) == 0);

IPv6Address addr("2001:08b0:ffd5:0003:c82f:6dff:fe70:f95f");
ck_assert(ether.globalAddress() == addr);
ether.end();

