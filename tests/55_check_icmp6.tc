#include "EtherSia.h"
#include "util.h"
#suite ICMPv6

const char local_mac[] = "ca:2f:6d:70:f9:5f";

const uint8_t expect_linklocal_nd[] = {
    0x33, 0x33, 0xff, 0x70, 0xf9, 0x5f,     // Ethernet Destination
    0xca, 0x2f, 0x6d, 0x70, 0xf9, 0x5f,     // Ethernet Source
    0x86, 0xdd,                             // EtherType (IPv6)
    0x60, 0x00, 0x00, 0x00,                 // IPv6 header
    0x00, 0x18,                             // Length
    0x3a,                                   // IP Protocol
    0xff,                                   // Hop Limit
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Source Address
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x70, 0xf9, 0x5f, // Destination Address
    0x87, 0x00, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00,                                                 // ICMPv6 header
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x2f, 0x6d, 0xff, 0xfe, 0x70, 0xf9, 0x5f  // ICMPv6 Target Address
};

const uint8_t expect_router_solication[] = {
    0x33, 0x33, 0x00, 0x00, 0x00, 0x02,     // Ethernet Destination
    0xca, 0x2f, 0x6d, 0x70, 0xf9, 0x5f,     // Ethernet Source
    0x86, 0xdd,                             // EtherType (IPv6)
    0x60, 0x00, 0x00, 0x00,                 // IPv6 header
    0x00, 0x10,                             // Length
    0x3a,                                   // IP Protocol
    0xff,                                   // Hop Limit
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x2f, 0x6d, 0xff, 0xfe, 0x70, 0xf9, 0x5f, // Source Address
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // Destination Address
    0x85, 0x00, 0x1d, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,                                     // ICMPv6 header
    0xca, 0x2f, 0x6d, 0x70, 0xf9, 0x5f                                                              // ICMPv6 Source Address
};

const uint8_t router_advertisment[] = {
    0x33, 0x33, 0x00, 0x00, 0x00, 0x01,     // Ethernet Destination
    0x3c, 0x61, 0x04, 0xd4, 0x8d, 0x88,     // Ethernet Source
    0x86, 0xdd,                             // EtherType (IPv6)
    0x60, 0x00, 0x00, 0x00,                 // IPv6 header
    0x00, 0x38,                             // Length
    0x3a,                                   // IP Protocol
    0xff,                                   // Hop Limit
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x61, 0x04, 0xff, 0xfe, 0xd4, 0x8d, 0x88, // Source Address
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // Destination Address
    0x86, 0x00, 0x65, 0x08, 0x40, 0x00, 0x03, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x3c, 0x61, 0x04, 0xd4, 0x8d, 0x88,
    0x03, 0x04, 0x40, 0xc0, 0x00, 0x27, 0x8d, 0x00, 0x00, 0x09, 0x3a, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x01, 0x08, 0xb0, 0xff, 0xd5, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


#test sends_linklocal_nd
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);

ck_assert_int_eq(1, ether.getSentCount());
frame_t &frame = ether.getLastSent();
ck_assert_int_eq(frame.length, sizeof(expect_linklocal_nd));
ck_assert(memcmp(frame.packet, expect_linklocal_nd, sizeof(expect_linklocal_nd)) == 0);
ether.end();


#test handles_router_solicitation
EtherSia_Dummy ether;
ether.injectRecievedPacket((void*)router_advertisment, sizeof(router_advertisment));
ether.begin(local_mac);

ck_assert_int_eq(2, ether.getSentCount());
frame_t &frame = ether.getLastSent();
ck_assert_int_eq(frame.length, sizeof(expect_router_solication));
ck_assert(memcmp(frame.packet, expect_router_solication, sizeof(expect_router_solication)) == 0);

IPv6Address addr("2001:08b0:ffd5:0003:c82f:6dff:fe70:f95f");
ck_assert(ether.globalAddress() == addr);
ether.end();


#test echo_response
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

// Receive a ping packet
const uint8_t echo_request_packet[] = {
    0x00, 0x04, 0xa3, 0x2c, 0x2b, 0xb9,  // Ethernet Destination
    0xa4, 0x5e, 0x60, 0xda, 0x58, 0x9d,  // Ethernet Source
    0x86, 0xdd,                          // EtherType
    0x60, 0x06, 0xf6, 0x54,              // IPv6 header
    0x00, 0x10,                          // Length (16 bytes)
    0x3a,                                // Protocol
    0x40,                                // Hop Limit
    0x20, 0x01, 0x08, 0xb0, 0xff, 0xd5, 0x00, 0x03, 0xa6, 0x5e, 0x60, 0xff, 0xfe, 0xda, 0x58, 0x9d,
    0x20, 0x01, 0x08, 0xb0, 0xff, 0xd5, 0x00, 0x03, 0x02, 0x04, 0xa3, 0xff, 0xfe, 0x2c, 0x2b, 0xb9,
    0x80,                                // ICMPv6 Echo Request
    0x00,                                // ICMPv6 Code
    0x33, 0xf7,                          // Checksum
    0x1d, 0x3a,                          // Identifier
    0x00, 0x21,                          // Sequence
    0x58, 0x07, 0xed, 0xde, 0x00, 0x0a, 0x68, 0x9e    // Data
};
ether.injectRecievedPacket((void*)echo_request_packet, sizeof(echo_request_packet));
ck_assert_int_eq(ether.receivePacket(), 70);

// Check the response
const uint8_t expect[] = {
    0xa4, 0x5e, 0x60, 0xda, 0x58, 0x9d,  // Ethernet Destination
    0x00, 0x04, 0xa3, 0x2c, 0x2b, 0xb9,  // Ethernet Source
    0x86, 0xdd,                          // EtherType
    0x60, 0x06, 0xf6, 0x54,              // IPv6 header
    0x00, 0x10,                          // Length (16 bytes)
    0x3a,                                // Protocol
    0x40,                                // Hop Limit
    0x20, 0x01, 0x08, 0xb0, 0xff, 0xd5, 0x00, 0x03, 0x02, 0x04, 0xa3, 0xff, 0xfe, 0x2c, 0x2b, 0xb9,
    0x20, 0x01, 0x08, 0xb0, 0xff, 0xd5, 0x00, 0x03, 0xa6, 0x5e, 0x60, 0xff, 0xfe, 0xda, 0x58, 0x9d,
    0x81,                                // ICMPv6 Echo Reply
    0x00,                                // ICMPv6 Code
    0x32, 0xf7,                          // Checksum
    0x1d, 0x3a,                          // Identifier
    0x00, 0x21,                          // Sequence
    0x58, 0x07, 0xed, 0xde, 0x00, 0x0a, 0x68, 0x9e    // Data
};
ck_assert_int_eq(ether.getSentCount(), 1);
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, sizeof(expect));
ck_assert(memcmp(sent.packet, expect, sizeof(expect)) == 0);
ether.end();

